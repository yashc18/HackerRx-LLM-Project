---
description: Security and performance best practices
globs: ["main*.py", "utils/*.py", "services/*.py"]
alwaysApply: true
---

# Security and Performance Guidelines

## Security Best Practices
- Validate all user inputs with Pydantic
- Sanitize document URLs and content
- Implement rate limiting per user/IP
- Use secure document handling practices
- Never log sensitive information
- Use environment variables for secrets

## Performance Optimization
- Implement multi-level caching (URL, embedding, response)
- Use connection pooling for databases
- Implement proper resource management
- Monitor memory usage and implement cleanup
- Use efficient data structures and algorithms
- Optimize for concurrent processing
- Minimize blocking I/O operations; use async for all database and external API calls
- Implement caching for static and frequently accessed data
- Optimize data serialization and deserialization with Pydantic
- Use lazy loading techniques for large datasets
- Prioritize API performance metrics (response time, latency, throughput)
- Structure routes and dependencies clearly for optimal performance

## Caching Strategy
- Use in-memory caching for frequently accessed data
- Implement cache invalidation strategies
- Monitor cache hit rates
- Set appropriate TTL values
- Use file-based caching for persistent data

## Resource Management
- Implement proper resource cleanup
- Use generators for large datasets
- Monitor memory usage
- Implement garbage collection strategies
- Use efficient data structures

## Monitoring and Alerting
- Set up health check endpoints
- Monitor system metrics
- Track error rates and response times
- Use structured logging format
- Implement performance monitoring

## Error Recovery
- Implement fallback mechanisms
- Provide meaningful error messages
- Use circuit breaker patterns
- Implement retry logic with backoff
- Maintain system stability under load
